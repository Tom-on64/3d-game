[ Engine design ]

Theres a global struct named 'state', which holds state like:
- The display camera
- The current scene to be rendered
- Input handlers
- Rendering context (ie. OpenGL)

The camera contains info like it's possition in the scene and other info.

A scene is a collection of game objects, where a game object MUST contain a position
and may contain some components

[ Library design ]

defs.h:
- Contains important macros, functions and types
- Vectors: 
    - The core vec_t type for a generic vector
    - vec<N>_t types where N is the component count
- Matricies:
    - Currently just mat4_t for 4x4 matricies
    - mat4_<type>() function macros for special matricies:
        - mat4_identity()
        - mat4_translate(vec3_t t)
        - mat4_scale(vec3_t s)
        - mat4_rotx(float a) 
        - mat4_roty(float a) 
        - mat4_rotz(float a) 
- Math functions for special types:
    - They follow this general syntax: '<T1>[N][T2]<op>(<type> a, <type> b)', where:
      - T1 is a character representing the first operand type (ie. 'm' for matrix)
      - N is the size of operand one (ie. '4' for mat4_t)
      - T2 is a char. represention the second operand type (ie. 'v' for vector). if it is ommited, second operand is same as first
      - op is the operation (ie. add, mult, div, dot...)
    - An example of a full function would be:
        'm4vmult(mat4_t a, vec4_t b)' for a Matrix4x4 and Vector4 multiplication (the vec4_t is implied, from the mat4_t)
    - Each type also has a <T>print for nice printing (vectors have a generic vprint, instead of vecNprint)
- Extra math functions:
    - lerp()
- Utility macros:
    - ASSERT()
    - DEG2RAD()
    - RAD2DEG()
- Math constants:
    - PI    = pi
    - PI_2  = pi/2
    - PI_4  = pi/4
    - TAU   = 4*pi

